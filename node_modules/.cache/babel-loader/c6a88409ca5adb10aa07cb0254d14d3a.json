{"ast":null,"code":"import _defineProperty from \"/Users/c-mack/address-book-react-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/c-mack/address-book-react-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/c-mack/address-book-react-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/c-mack/address-book-react-forked/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport ContactsList from \"./components/ContactsList\";\nimport CreateContactForm from \"./components/CreateContactForm\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      contacts = _useState2[0],\n      setContacts = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hideForm = _useState4[0],\n      setHideForm = _useState4[1];\n\n  var _useState5 = useState({\n    firstName: \"\",\n    lastName: \"\",\n    blockContact: false\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      contactInputs = _useState6[0],\n      setContactInputs = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      street = _useState8[0],\n      setStreet = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      city = _useState10[0],\n      setCity = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      postCode = _useState12[0],\n      setPostCode = _useState12[1];\n\n  console.log(\"CreateContactForm State: \", {\n    contactInputs: contactInputs\n  });\n\n  var handleContactInputs = function handleContactInputs(event) {\n    console.log(\"Inside handleContactInputs: \", event.target.name, event.target.value);\n    var inputType = event.target.type;\n    var inputName = event.target.name;\n\n    if (inputType === \"checkbox\") {\n      setContactInputs(_objectSpread(_objectSpread({}, contactInputs), {}, _defineProperty({}, inputName, event.target.checked)));\n    } else {\n      setContactInputs(_objectSpread(_objectSpread({}, contactInputs), {}, _defineProperty({}, inputName, event.target.value)));\n    }\n  };\n\n  var handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n    var addressToCreate = {\n      street: street,\n      city: city,\n      postCode: postCode\n    };\n    var fetchOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(addressToCreate)\n    };\n    fetch(\"http://localhost:3030/addresses\", fetchOptions).then(function (res) {\n      return res.json();\n    }).then(function (newAddress) {\n      console.log(\"addresses POST request: \", newAddress);\n      var contactToCreate = {\n        firstName: firstName,\n        lastName: lastName,\n        blockContact: blockContact,\n        addressId: newAddress.id\n      }; // console.log(\"contact to create: \", contactToCreate)\n      // Ready to write our next post request in here...\n    });\n  }; // [TODO] Write a useEffect to fetch contacts here...\n\n\n  useEffect(function () {\n    fetch(\"http://localhost:3030/contacts\").then(function (res) {\n      return res.json();\n    }).then(function (newContact) {\n      console.log(\"inside fetch: \", newContact);\n      setContacts(newContact);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ContactsList, {\n      contacts: contacts,\n      hideForm: hideForm,\n      setHideForm: setHideForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: !hideForm && /*#__PURE__*/_jsxDEV(CreateContactForm, {\n        handleContactInputs: handleContactInputs,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"7xlQ80LiNCdl2bLUSVRHB5GffVw=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/c-mack/address-book-react-forked/src/App.js"],"names":["useState","useEffect","ContactsList","CreateContactForm","App","contacts","setContacts","hideForm","setHideForm","firstName","lastName","blockContact","contactInputs","setContactInputs","street","setStreet","city","setCity","postCode","setPostCode","console","log","handleContactInputs","event","target","name","value","inputType","type","inputName","checked","handleSubmit","preventDefault","addressToCreate","fetchOptions","method","headers","body","JSON","stringify","fetch","then","res","json","newAddress","contactToCreate","addressId","id","newContact"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport ContactsList from \"./components/ContactsList\";\nimport CreateContactForm from \"./components/CreateContactForm\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [contacts, setContacts] = useState([]);\n  const [hideForm, setHideForm] = useState(true);\n  const [contactInputs, setContactInputs] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    blockContact: false,\n  })\n  const [street, setStreet] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [postCode, setPostCode] = useState(\"\")\n  \n  console.log(\"CreateContactForm State: \", { contactInputs })\n\n  const handleContactInputs = event => {\n    console.log(\n      \"Inside handleContactInputs: \",\n      event.target.name,\n      event.target.value\n    )\n  \n    const inputType = event.target.type\n  \n    const inputName = event.target.name\n\n\n    if (inputType === \"checkbox\") {\n      setContactInputs({\n        ...contactInputs,\n        [inputName]: event.target.checked,\n      })\n    } else {\n      setContactInputs({\n        ...contactInputs,\n        [inputName]: event.target.value,\n      })\n    }\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault()\n\n    const addressToCreate = {\n      street,\n      city,\n      postCode,\n    }\n\n    const fetchOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(addressToCreate),\n    }\n\n    fetch(\"http://localhost:3030/addresses\", fetchOptions)\n      .then(res => res.json())\n      .then(newAddress => {\n        console.log(\"addresses POST request: \", newAddress)\n\n        const contactToCreate = {\n          firstName,\n          lastName,\n          blockContact,\n          addressId: newAddress.id,\n        }\n\n        // console.log(\"contact to create: \", contactToCreate)\n\n        // Ready to write our next post request in here...\n      })\n  }\n  \n  // [TODO] Write a useEffect to fetch contacts here...\nuseEffect(() => {\n\n  fetch(`http://localhost:3030/contacts`)\n  .then((res) => res.json())\n  .then((newContact) => {\n    console.log(\"inside fetch: \", newContact)\n\n  setContacts(newContact)\n  })\n}, [])\n\n\n\n  return (\n    <>\n      <ContactsList\n        contacts={contacts}\n        hideForm={hideForm}\n        setHideForm={setHideForm}\n      />\n      <main>{!hideForm && <CreateContactForm handleContactInputs={handleContactInputs} handleSubmit={handleSubmit}/>}</main>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}